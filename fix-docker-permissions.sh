#!/bin/bash

# Script de Corre√ß√£o R√°pida - Permiss√µes Docker Socket
# Resolve o erro: PermissionError(13, 'Permission denied') no Docker socket

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîß Corre√ß√£o de Permiss√µes Docker Socket${NC}"
echo "============================================"
echo ""

# Verificar se est√° rodando como root ou com sudo
if [ "$EUID" -ne 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Este script precisa de privil√©gios de administrador${NC}"
    echo -e "${YELLOW}üí° Execute: sudo $0${NC}"
    exit 1
fi

echo -e "${YELLOW}üîç Diagnosticando problema...${NC}"

# Verificar se o Docker est√° rodando
if ! systemctl is-active --quiet docker; then
    echo -e "${RED}‚ùå Docker n√£o est√° rodando${NC}"
    echo -e "${YELLOW}üöÄ Iniciando Docker...${NC}"
    systemctl start docker
    sleep 3
fi

echo -e "${GREEN}‚úÖ Docker est√° rodando${NC}"

# Verificar permiss√µes atuais do socket
echo -e "${YELLOW}üìã Permiss√µes atuais do Docker socket:${NC}"
ls -la /var/run/docker.sock

# Verificar se o grupo docker existe
if ! getent group docker > /dev/null 2>&1; then
    echo -e "${YELLOW}üìù Criando grupo docker...${NC}"
    groupadd docker
fi

# Corrigir permiss√µes do socket
echo -e "${YELLOW}üîß Corrigindo permiss√µes do Docker socket...${NC}"
chown root:docker /var/run/docker.sock
chmod 660 /var/run/docker.sock

echo -e "${GREEN}‚úÖ Permiss√µes corrigidas${NC}"

# Verificar permiss√µes ap√≥s corre√ß√£o
echo -e "${YELLOW}üìã Novas permiss√µes:${NC}"
ls -la /var/run/docker.sock

# Verificar se o servi√ßo autoscaler existe
echo -e "${YELLOW}üîç Verificando servi√ßo autoscaler...${NC}"
if docker service ls | grep -q "autoscaler-n8n_autoscaler"; then
    echo -e "${GREEN}‚úÖ Servi√ßo encontrado${NC}"
    
    # Verificar montagem do volume
    echo -e "${YELLOW}üìã Verificando montagem do Docker socket...${NC}"
    MOUNT_INFO=$(docker service inspect autoscaler-n8n_autoscaler --format '{{.Spec.TaskTemplate.ContainerSpec.Mounts}}' 2>/dev/null || echo "")
    
    if [[ $MOUNT_INFO == *"/var/run/docker.sock"* ]]; then
        echo -e "${GREEN}‚úÖ Docker socket est√° montado corretamente${NC}"
    else
        echo -e "${RED}‚ùå Docker socket n√£o est√° montado${NC}"
        echo -e "${YELLOW}üîß Adicionando montagem do Docker socket...${NC}"
        
        docker service update \
            --mount-add type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock,readonly=true \
            autoscaler-n8n_autoscaler
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Montagem adicionada com sucesso${NC}"
        else
            echo -e "${RED}‚ùå Erro ao adicionar montagem${NC}"
        fi
    fi
    
    # Reiniciar o servi√ßo para aplicar as mudan√ßas
    echo -e "${YELLOW}üîÑ Reiniciando servi√ßo autoscaler...${NC}"
    docker service update --force autoscaler-n8n_autoscaler
    
    echo -e "${YELLOW}‚è≥ Aguardando reinicializa√ß√£o...${NC}"
    sleep 10
    
    # Verificar status ap√≥s reinicializa√ß√£o
    echo -e "${YELLOW}üìä Status do servi√ßo:${NC}"
    docker service ps autoscaler-n8n_autoscaler --no-trunc
    
else
    echo -e "${RED}‚ùå Servi√ßo autoscaler-n8n_autoscaler n√£o encontrado${NC}"
    echo -e "${YELLOW}üí° Execute o deploy primeiro:${NC}"
    echo "docker stack deploy -c stack-n8n-integration.yaml autoscaler-n8n"
fi

echo ""
echo -e "${BLUE}üìã Comandos para verificar se funcionou:${NC}"
echo "1. Ver logs: docker service logs -f autoscaler-n8n_autoscaler"
echo "2. Status: docker service ps autoscaler-n8n_autoscaler"
echo "3. Teste: docker exec -it \$(docker ps -q -f name=autoscaler) docker version"

echo ""
echo -e "${GREEN}üéâ Corre√ß√£o conclu√≠da!${NC}"
echo -e "${YELLOW}üìù Se o problema persistir, verifique o TROUBLESHOOTING.md${NC}"